generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id                    String                 @id @default(uuid())
  name                  String
  url                   String
  description          String?
  browser              String?
  environment          String                 @default("development")
  library              String?
  playwrightProjectPath String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  createdBy            String?
  updatedBy            String?
  lastRunBy            String?
  lastRun              DateTime?
  testCases            TestCase[]
  testResults          TestResultHistory[]
  permissions          PermissionAssignment[] @relation("ProjectPermissions")
  fixtures             Fixture[]

  @@map("projects")
}

model TestCase {
  id                   String                 @id @default(uuid())
  projectId            String
  name                 String
  description          String?
  status              String                 @default("pending")
  version             String                 @default("1.0.0")
  playwrightTestScript String?
  isManual            Boolean                @default(false)
  createdAt           DateTime               @default(now())
  lastRun             DateTime?
  updatedAt           DateTime               @updatedAt
  createdBy           String?
  updatedBy           String?
  lastRunBy           String?
  tags                String?
  testFilePath        String?
  playwrightCodeSource String?
  project             Project                @relation(fields: [projectId], references: [id], onDelete: Cascade)
  testResults         TestResultHistory[]
  testSteps           TestStep[]
  versions            TestCaseVersion[]
  permissions         PermissionAssignment[] @relation("TestCasePermissions")
}

model TestStep {
  id             String    @id @default(uuid())
  testCaseId     String?
  fixtureId      String?
  action         String
  data           String?
  expected       String?
  playwrightCode String?
  selector       String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdBy      String?
  updatedBy      String?
  order          Int
  disabled       Boolean   @default(false)
  testCase       TestCase? @relation(fields: [testCaseId], references: [id], onDelete: Cascade)
  fixture        Fixture?  @relation(fields: [fixtureId], references: [id], onDelete: Cascade)
}

model TestResultHistory {
  id            String    @id @default(uuid())
  projectId     String
  testCaseId    String?
  success       Boolean
  status        String
  executionTime Int?
  output        String?
  errorMessage  String?
  resultData    String?
  createdAt     DateTime  @default(now())
  createdBy     String?
  lastRunBy     String?
  browser       String?
  videoUrl      String?
  testCase      TestCase? @relation(fields: [testCaseId], references: [id], onDelete: Cascade)
  project       Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model User {
  id          String     @id @default(uuid())
  email       String     @unique
  name        String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  updatedBy   String?
  roles       UserRole[]
}

model Setting {
  id         String   @id @default(uuid())
  key        String   @unique
  value      String
  userId     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  createdBy  String?
  updatedBy  String?
}

model Permission {
  id                    String                 @id @default(uuid())
  name                  String                 @unique
  description           String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  rolePermissions       RolePermission[]
  permissionAssignments PermissionAssignment[]
}

model Role {
  id                    String                 @id @default(uuid())
  name                  String                 @unique
  description           String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  userRoles            UserRole[]
  rolePermissions       RolePermission[]
  permissionAssignments PermissionAssignment[]
}

model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model UserRole {
  id        String   @id @default(uuid())
  userId    String
  roleId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}

model PermissionAssignment {
  id           String     @id @default(uuid())
  roleId       String
  permissionId String
  resourceId   String?
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  project      Project?   @relation("ProjectPermissions", fields: [resourceId], references: [id], onDelete: Cascade, map: "ProjectPermissionAssignment")
  testCase     TestCase?  @relation("TestCasePermissions", fields: [resourceId], references: [id], onDelete: Cascade, map: "TestCasePermissionAssignment")

  @@index([roleId])
  @@index([permissionId])
  @@index([resourceId])
}

model TestCaseVersion {
  id                   String            @id @default(uuid())
  testCaseId          String
  version             String
  name                String
  description         String?
  playwrightTestScript String?
  createdAt           DateTime          @default(now())
  createdBy           String?
  testCase            TestCase          @relation(fields: [testCaseId], references: [id], onDelete: Cascade)
  testStepVersions    TestStepVersion[]
}

model TestStepVersion {
  id                String         @id @default(uuid())
  testCaseVersionId String
  action            String
  data              String?
  expected          String?
  playwrightCode    String?
  selector          String?
  order             Int
  disabled          Boolean        @default(false)
  createdAt         DateTime       @default(now())
  createdBy         String?
  testCaseVersion   TestCaseVersion @relation(fields: [testCaseVersionId], references: [id], onDelete: Cascade)
}

model Fixture {
  id          String     @id @default(uuid())
  projectId   String
  name        String
  description String?
  code        String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdBy   String?
  updatedBy   String?
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  testSteps   TestStep[]
}

model Tag {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  updatedBy   String?
}
